autentikasi menggunakan JWT di aplikasi React

JWT adalah metode yang kuat untuk mentransmisikan informasi secara aman antara pihak-pihak sebagai objek JSON.

Langkah 1: Instalasi
========================

Langkah 1: Setup Backend dengan Express.js dan JWT

mkdir auth-backend
cd auth-backend
npm init -y
npm install express jsonwebtoken body-parser cookie-parser cors


============================================

2. Buat file server.js:

const express = require('express');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');
const cookieParser = require('cookie-parser');
const cors = require('cors');

const app = express();
const PORT = 5000;
const ACCESS_TOKEN_SECRET = 'youraccesstokensecret';
const REFRESH_TOKEN_SECRET = 'yourrefreshtokensecret';

app.use(bodyParser.json());
app.use(cookieParser());
app.use(cors({ origin: 'http://localhost:3000', credentials: true }));

let refreshTokens = [];

app.post('/login', (req, res) => {
    const { username, password } = req.body;
    if (username === 'user' && password === 'password') {
        const accessToken = jwt.sign({ username }, ACCESS_TOKEN_SECRET, { expiresIn: '15m' });
        const refreshToken = jwt.sign({ username }, REFRESH_TOKEN_SECRET);
        refreshTokens.push(refreshToken);
        res.cookie('refreshToken', refreshToken, { httpOnly: true });
        res.json({ accessToken });
    } else {
        res.sendStatus(401);
    }
});

app.post('/token', (req, res) => {
    const { refreshToken } = req.cookies;
    if (!refreshToken || !refreshTokens.includes(refreshToken)) {
        return res.sendStatus(403);
    }
    jwt.verify(refreshToken, REFRESH_TOKEN_SECRET, (err, user) => {
        if (err) return res.sendStatus(403);
        const accessToken = jwt.sign({ username: user.username }, ACCESS_TOKEN_SECRET, { expiresIn: '15m' });
        res.json({ accessToken });
    });
});

app.post('/logout', (req, res) => {
    const { refreshToken } = req.cookies;
    refreshTokens = refreshTokens.filter(token => token !== refreshToken);
    res.clearCookie('refreshToken');
    res.sendStatus(204);
});

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});


===================================

4. Jalankan Server:

node server.js

=====================================

Langkah 2: Setup Frontend dengan React

npx create-react-app auth-frontend
cd auth-frontend
npm install axios


=============================================

Buat file Login.js:

import React, { useState } from 'react';
import axios from 'axios';

const Login = ({ setAccessToken }) => {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await axios.post('http://localhost:5000/login', { username, password }, { withCredentials: true });
            setAccessToken(response.data.accessToken);
        } catch (err) {
            console.error(err);
        }
    };

    return (
        <form onSubmit={handleSubmit}>
            <input type="text" placeholder="Username" value={username} onChange={(e) => setUsername(e.target.value)} />
            <input type="password" placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} />
            <button type="submit">Login</button>
        </form>
    );
};

export default Login;


===========================================

Modifikasi App.js:

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import Login from './Login';

const App = () => {
    const [accessToken, setAccessToken] = useState('');

    useEffect(() => {
        const interval = setInterval(async () => {
            try {
                const response = await axios.post('http://localhost:5000/token', {}, { withCredentials: true });
                setAccessToken(response.data.accessToken);
            } catch (err) {
                console.error(err);
            }
        }, 14 * 60 * 1000); // Refresh token every 14 minutes
        return () => clearInterval(interval);
    }, []);

    return (
        <div>
            {accessToken ? (
                <h2>Logged in with access token: {accessToken}</h2>
            ) : (
                <Login setAccessToken={setAccessToken} />
            )}
        </div>
    );
};

export default App;


===========================================

Jalankan Aplikasi React:

npm start


=====================================

Buka http://localhost:3000 di browser.
Masukkan username sebagai "user" dan password sebagai "password".
Setelah login berhasil, Anda akan melihat token akses ditampilkan.


==========================================

gambar direktory nya : 

auth-backend/
│
├── node_modules/
│
├── package.json
├── package-lock.json
│
├── server.js


==============================

auth-frontend/
│
├── node_modules/
│
├── public/
│   ├── index.html
│   └── ...
│
├── src/
│   ├── components/
│   │   ├── Login.js
│   ├── App.js
│   ├── index.js
│   └── ...
│
├── package.json
├── package-lock.json
├── .gitignore
├── README.md


==============================================
